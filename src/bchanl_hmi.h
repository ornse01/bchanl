/*
 * bchanl_hmi.h
 *
 * Copyright (c) 2012 project bchan
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 *    distribution.
 *
 */

/* This file is automatically generated. */

#include    <basic.h>
#include	<btron/dp.h>
#include	<btron/hmi.h>

#ifndef __BCHANL_HMI_H__
#define __BCHANL_HMI_H__

typedef struct subjectwindow_t_ subjectwindow_t;
typedef VOID (*subjectwindow_scrollcalback)(VP arg, W dh, W dv);

IMPORT VOID subjectwindow_scrollbyvalue(subjectwindow_t *window, W dh, W dv);
IMPORT W subjectwindow_setdrawrect(subjectwindow_t *window, W l, W t, W r, W b);
IMPORT W subjectwindow_setworkrect(subjectwindow_t *window, W l, W t, W r, W b);
IMPORT W subjectwindow_scrollworkarea(subjectwindow_t *window, W dh, W dv);
IMPORT W subjectwindow_getworkrect(subjectwindow_t *window, RECT *r);
IMPORT VOID subjectwindow_responsepasterequest(subjectwindow_t *window, W nak, PNT *pos);
IMPORT W subjectwindow_startredisp(subjectwindow_t *window, RECT *r);
IMPORT W subjectwindow_endredisp(subjectwindow_t *window);
IMPORT W subjectwindow_eraseworkarea(subjectwindow_t *window, RECT *r);
IMPORT W subjectwindow_requestredisp(subjectwindow_t *window);
IMPORT GID subjectwindow_startdrag(subjectwindow_t *window);
IMPORT W subjectwindow_getdrag(subjectwindow_t *window, PNT *pos, WID *wid, PNT *pos_butup);
IMPORT VOID subjectwindow_enddrag(subjectwindow_t *window);
IMPORT GID subjectwindow_getGID(subjectwindow_t *window);
IMPORT WID subjectwindow_getWID(subjectwindow_t *window);
IMPORT W subjectwindow_settitle(subjectwindow_t *window, TC *title);
IMPORT Bool subjectwindow_isactive(subjectwindow_t *window);

typedef struct bbsmenuwindow_t_ bbsmenuwindow_t;
typedef VOID (*bbsmenuwindow_scrollcalback)(VP arg, W dh, W dv);

IMPORT VOID bbsmenuwindow_scrollbyvalue(bbsmenuwindow_t *window, W dh, W dv);
IMPORT W bbsmenuwindow_setdrawrect(bbsmenuwindow_t *window, W l, W t, W r, W b);
IMPORT W bbsmenuwindow_setworkrect(bbsmenuwindow_t *window, W l, W t, W r, W b);
IMPORT W bbsmenuwindow_scrollworkarea(bbsmenuwindow_t *window, W dh, W dv);
IMPORT W bbsmenuwindow_getworkrect(bbsmenuwindow_t *window, RECT *r);
IMPORT W bbsmenuwindow_startredisp(bbsmenuwindow_t *window, RECT *r);
IMPORT W bbsmenuwindow_endredisp(bbsmenuwindow_t *window);
IMPORT W bbsmenuwindow_eraseworkarea(bbsmenuwindow_t *window, RECT *r);
IMPORT W bbsmenuwindow_requestredisp(bbsmenuwindow_t *window);
IMPORT GID bbsmenuwindow_startdrag(bbsmenuwindow_t *window);
IMPORT W bbsmenuwindow_getdrag(bbsmenuwindow_t *window, PNT *pos, WID *wid, PNT *pos_butup);
IMPORT VOID bbsmenuwindow_enddrag(bbsmenuwindow_t *window);
IMPORT GID bbsmenuwindow_getGID(bbsmenuwindow_t *window);
IMPORT WID bbsmenuwindow_getWID(bbsmenuwindow_t *window);
IMPORT W bbsmenuwindow_settitle(bbsmenuwindow_t *window, TC *title);
IMPORT Bool bbsmenuwindow_isactive(bbsmenuwindow_t *window);

typedef struct subjectoptionwindow_t_ subjectoptionwindow_t;

IMPORT Bool subjectoptionwindow_isopen(subjectoptionwindow_t *window);
IMPORT W subjectoptionwindow_requestredisp(subjectoptionwindow_t *window);
IMPORT GID subjectoptionwindow_getGID(subjectoptionwindow_t *window);
IMPORT WID subjectoptionwindow_getWID(subjectoptionwindow_t *window);
IMPORT W subjectoptionwindow_settitle(subjectoptionwindow_t *window, TC *title);
IMPORT Bool subjectoptionwindow_isactive(subjectoptionwindow_t *window);
IMPORT W subjectoptionwindow_open(subjectoptionwindow_t *window);
IMPORT VOID subjectoptionwindow_close(subjectoptionwindow_t *window);
IMPORT W subjectoptionwindow_setfiltertext(subjectoptionwindow_t *window, TC *str, W len);
IMPORT W subjectoptionwindow_getfiltertext(subjectoptionwindow_t *window, TC *str, W len);
IMPORT W subjectoptionwindow_cutfiltertext(subjectoptionwindow_t *window, TC *str, W len, Bool cut);
IMPORT W subjectoptionwindow_insertfiltertext(subjectoptionwindow_t *window, TC *str, W len);
enum SUBJECTOPTIONWINDOW_ORDERVALUE_T_ {
	SUBJECTOPTIONWINDOW_ORDERVALUE_NOSEL = 0,
	SUBJECTOPTIONWINDOW_ORDERVALUE_ASCENDING,
	SUBJECTOPTIONWINDOW_ORDERVALUE_DESCENDING,
};
typedef enum SUBJECTOPTIONWINDOW_ORDERVALUE_T_ SUBJECTOPTIONWINDOW_ORDERVALUE_T;
IMPORT W subjectoptionwindow_setordervalue(subjectoptionwindow_t *window, SUBJECTOPTIONWINDOW_ORDERVALUE_T value);
IMPORT W subjectoptionwindow_getordervalue(subjectoptionwindow_t *window, SUBJECTOPTIONWINDOW_ORDERVALUE_T *value);
enum SUBJECTOPTIONWINDOW_ORDERBYVALUE_T_ {
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_NOSEL = 0,
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_NUMBER,
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_RES,
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_SINCE,
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_VIGOR,
};
typedef enum SUBJECTOPTIONWINDOW_ORDERBYVALUE_T_ SUBJECTOPTIONWINDOW_ORDERBYVALUE_T;
IMPORT W subjectoptionwindow_setorderbyvalue(subjectoptionwindow_t *window, SUBJECTOPTIONWINDOW_ORDERBYVALUE_T value);
IMPORT W subjectoptionwindow_getorderbyvalue(subjectoptionwindow_t *window, SUBJECTOPTIONWINDOW_ORDERBYVALUE_T *value);

typedef struct registerexternalwindow_t_ registerexternalwindow_t;

IMPORT Bool registerexternalwindow_isopen(registerexternalwindow_t *window);
IMPORT W registerexternalwindow_requestredisp(registerexternalwindow_t *window);
IMPORT GID registerexternalwindow_getGID(registerexternalwindow_t *window);
IMPORT WID registerexternalwindow_getWID(registerexternalwindow_t *window);
IMPORT W registerexternalwindow_settitle(registerexternalwindow_t *window, TC *title);
IMPORT Bool registerexternalwindow_isactive(registerexternalwindow_t *window);
IMPORT W registerexternalwindow_open(registerexternalwindow_t *window);
IMPORT VOID registerexternalwindow_close(registerexternalwindow_t *window);
IMPORT W registerexternalwindow_setboradnametext(registerexternalwindow_t *window, TC *str, W len);
IMPORT W registerexternalwindow_getboradnametext(registerexternalwindow_t *window, TC *str, W len);
IMPORT W registerexternalwindow_cutboradnametext(registerexternalwindow_t *window, TC *str, W len, Bool cut);
IMPORT W registerexternalwindow_insertboradnametext(registerexternalwindow_t *window, TC *str, W len);
IMPORT W registerexternalwindow_seturltext(registerexternalwindow_t *window, TC *str, W len);
IMPORT W registerexternalwindow_geturltext(registerexternalwindow_t *window, TC *str, W len);
IMPORT W registerexternalwindow_cuturltext(registerexternalwindow_t *window, TC *str, W len, Bool cut);
IMPORT W registerexternalwindow_inserturltext(registerexternalwindow_t *window, TC *str, W len);

typedef struct externalbbswindow_t_ externalbbswindow_t;
typedef VOID (*externalbbswindow_scrollcalback)(VP arg, W dh, W dv);

IMPORT VOID externalbbswindow_scrollbyvalue(externalbbswindow_t *window, W dh, W dv);
IMPORT W externalbbswindow_setdrawrect(externalbbswindow_t *window, W l, W t, W r, W b);
IMPORT W externalbbswindow_setworkrect(externalbbswindow_t *window, W l, W t, W r, W b);
IMPORT W externalbbswindow_scrollworkarea(externalbbswindow_t *window, W dh, W dv);
IMPORT W externalbbswindow_getworkrect(externalbbswindow_t *window, RECT *r);
IMPORT Bool externalbbswindow_isopen(externalbbswindow_t *window);
IMPORT VOID externalbbswindow_responsepasterequest(externalbbswindow_t *window, W nak, PNT *pos);
IMPORT W externalbbswindow_startredisp(externalbbswindow_t *window, RECT *r);
IMPORT W externalbbswindow_endredisp(externalbbswindow_t *window);
IMPORT W externalbbswindow_eraseworkarea(externalbbswindow_t *window, RECT *r);
IMPORT W externalbbswindow_requestredisp(externalbbswindow_t *window);
IMPORT GID externalbbswindow_startdrag(externalbbswindow_t *window);
IMPORT W externalbbswindow_getdrag(externalbbswindow_t *window, PNT *pos, WID *wid, PNT *pos_butup);
IMPORT VOID externalbbswindow_enddrag(externalbbswindow_t *window);
IMPORT GID externalbbswindow_getGID(externalbbswindow_t *window);
IMPORT WID externalbbswindow_getWID(externalbbswindow_t *window);
IMPORT W externalbbswindow_settitle(externalbbswindow_t *window, TC *title);
IMPORT Bool externalbbswindow_isactive(externalbbswindow_t *window);
IMPORT W externalbbswindow_open(externalbbswindow_t *window);
IMPORT VOID externalbbswindow_close(externalbbswindow_t *window);

enum {
	BCHANLHMIEVENT_TYPE_NONE,
	BCHANLHMIEVENT_TYPE_COMMON_MOUSEMOVE,
	BCHANLHMIEVENT_TYPE_COMMON_KEYDOWN,
	BCHANLHMIEVENT_TYPE_COMMON_MENU,
	BCHANLHMIEVENT_TYPE_COMMON_TIMEOUT,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_DRAW,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_RESIZE,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_CLOSE,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_BUTDN,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_PASTE,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_MOUSEMOVE,
	BCHANLHMIEVENT_TYPE_SUBJECTWINDOW_SCROLL,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_DRAW,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_RESIZE,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_CLOSE,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_BUTDN,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_MOUSEMOVE,
	BCHANLHMIEVENT_TYPE_BBSMENUWINDOW_SCROLL,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_FILTER_DETERMINE,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_FILTER_COPY,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_FILTER_MOVE,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_FILTER_MENU,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_FILTER_KEYMENU,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_ORDER_CHANGE,
	BCHANLHMIEVENT_TYPE_SUBJECTOPTIONWINDOW_PARTS_ORDERBY_CHANGE,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_BORADNAME_DETERMINE,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_BORADNAME_COPY,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_BORADNAME_MOVE,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_BORADNAME_MENU,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_BORADNAME_KEYMENU,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_URL_DETERMINE,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_URL_COPY,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_URL_MOVE,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_URL_MENU,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_URL_KEYMENU,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_DETERMINE_PUSH,
	BCHANLHMIEVENT_TYPE_REGISTEREXTERNALWINDOW_PARTS_CANCEL_PUSH,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_DRAW,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_RESIZE,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_CLOSE,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_BUTDN,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_PASTE,
	BCHANLHMIEVENT_TYPE_EXTERNALBBSWINDOW_SCROLL,
};

struct bchanlhmi_eventdata_mousemove_t_ {
	PNT pos;
};
typedef struct bchanlhmi_eventdata_mousemove_t_ bchanlhmi_eventdata_mousemove_t;

struct bchanlhmi_eventdata_keydown_t_ {
	TC keycode;
	UH keytop;
	UW stat;
};
typedef struct bchanlhmi_eventdata_keydown_t_ bchanlhmi_eventdata_keydown_t;

struct bchanlhmi_eventdata_menu_t_ {
	PNT pos;
};
typedef struct bchanlhmi_eventdata_menu_t_ bchanlhmi_eventdata_menu_t;

struct bchanlhmi_eventdata_timeout_t_ {
	W code;
};
typedef struct bchanlhmi_eventdata_timeout_t_ bchanlhmi_eventdata_timeout_t;

struct subjectwindow_eventdata_draw_t_ {
};
typedef struct subjectwindow_eventdata_draw_t_ subjectwindow_eventdata_draw_t;

struct subjectwindow_eventdata_resize_t_ {
	SIZE work_sz;
};
typedef struct subjectwindow_eventdata_resize_t_ subjectwindow_eventdata_resize_t;

struct subjectwindow_eventdata_close_t_ {
	Bool save;
};
typedef struct subjectwindow_eventdata_close_t_ subjectwindow_eventdata_close_t;

struct subjectwindow_eventdata_butdn_t_ {
	W type;
	PNT pos;
};
typedef struct subjectwindow_eventdata_butdn_t_ subjectwindow_eventdata_butdn_t;

struct subjectwindow_eventdata_paste_t_ {
};
typedef struct subjectwindow_eventdata_paste_t_ subjectwindow_eventdata_paste_t;

struct subjectwindow_eventdata_mousemove_t_ {
	PNT pos;
	UW stat;
};
typedef struct subjectwindow_eventdata_mousemove_t_ subjectwindow_eventdata_mousemove_t;

struct subjectwindow_eventdata_scroll_t_ {
	W dh;
	W dv;
};
typedef struct subjectwindow_eventdata_scroll_t_ subjectwindow_eventdata_scroll_t;

struct bbsmenuwindow_eventdata_draw_t_ {
};
typedef struct bbsmenuwindow_eventdata_draw_t_ bbsmenuwindow_eventdata_draw_t;

struct bbsmenuwindow_eventdata_resize_t_ {
	SIZE work_sz;
};
typedef struct bbsmenuwindow_eventdata_resize_t_ bbsmenuwindow_eventdata_resize_t;

struct bbsmenuwindow_eventdata_close_t_ {
	Bool save;
};
typedef struct bbsmenuwindow_eventdata_close_t_ bbsmenuwindow_eventdata_close_t;

struct bbsmenuwindow_eventdata_butdn_t_ {
	W type;
	PNT pos;
};
typedef struct bbsmenuwindow_eventdata_butdn_t_ bbsmenuwindow_eventdata_butdn_t;

struct bbsmenuwindow_eventdata_mousemove_t_ {
	PNT pos;
	UW stat;
};
typedef struct bbsmenuwindow_eventdata_mousemove_t_ bbsmenuwindow_eventdata_mousemove_t;

struct bbsmenuwindow_eventdata_scroll_t_ {
	W dh;
	W dv;
};
typedef struct bbsmenuwindow_eventdata_scroll_t_ bbsmenuwindow_eventdata_scroll_t;

struct subjectoptionwindow_eventdata_filter_determine_t_ {
	TC *value;
	W len;
};
typedef struct subjectoptionwindow_eventdata_filter_determine_t_ subjectoptionwindow_eventdata_filter_determine_t;

struct subjectoptionwindow_eventdata_filter_copy_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct subjectoptionwindow_eventdata_filter_copy_t_ subjectoptionwindow_eventdata_filter_copy_t;

struct subjectoptionwindow_eventdata_filter_move_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct subjectoptionwindow_eventdata_filter_move_t_ subjectoptionwindow_eventdata_filter_move_t;

struct subjectoptionwindow_eventdata_filter_menu_t_ {
	PNT pos;
};
typedef struct subjectoptionwindow_eventdata_filter_menu_t_ subjectoptionwindow_eventdata_filter_menu_t;

struct subjectoptionwindow_eventdata_filter_keymenu_t_ {
	TC keycode;
};
typedef struct subjectoptionwindow_eventdata_filter_keymenu_t_ subjectoptionwindow_eventdata_filter_keymenu_t;

struct subjectoptionwindow_eventdata_order_change_t_ {
	SUBJECTOPTIONWINDOW_ORDERVALUE_T value;
};
typedef struct subjectoptionwindow_eventdata_order_change_t_ subjectoptionwindow_eventdata_order_change_t;

struct subjectoptionwindow_eventdata_orderby_change_t_ {
	SUBJECTOPTIONWINDOW_ORDERBYVALUE_T value;
};
typedef struct subjectoptionwindow_eventdata_orderby_change_t_ subjectoptionwindow_eventdata_orderby_change_t;

struct registerexternalwindow_eventdata_boradname_determine_t_ {
	TC *value;
	W len;
};
typedef struct registerexternalwindow_eventdata_boradname_determine_t_ registerexternalwindow_eventdata_boradname_determine_t;

struct registerexternalwindow_eventdata_boradname_copy_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_boradname_copy_t_ registerexternalwindow_eventdata_boradname_copy_t;

struct registerexternalwindow_eventdata_boradname_move_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_boradname_move_t_ registerexternalwindow_eventdata_boradname_move_t;

struct registerexternalwindow_eventdata_boradname_menu_t_ {
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_boradname_menu_t_ registerexternalwindow_eventdata_boradname_menu_t;

struct registerexternalwindow_eventdata_boradname_keymenu_t_ {
	TC keycode;
};
typedef struct registerexternalwindow_eventdata_boradname_keymenu_t_ registerexternalwindow_eventdata_boradname_keymenu_t;

struct registerexternalwindow_eventdata_url_determine_t_ {
	TC *value;
	W len;
};
typedef struct registerexternalwindow_eventdata_url_determine_t_ registerexternalwindow_eventdata_url_determine_t;

struct registerexternalwindow_eventdata_url_copy_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_url_copy_t_ registerexternalwindow_eventdata_url_copy_t;

struct registerexternalwindow_eventdata_url_move_t_ {
	WID rel_wid;
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_url_move_t_ registerexternalwindow_eventdata_url_move_t;

struct registerexternalwindow_eventdata_url_menu_t_ {
	PNT pos;
};
typedef struct registerexternalwindow_eventdata_url_menu_t_ registerexternalwindow_eventdata_url_menu_t;

struct registerexternalwindow_eventdata_url_keymenu_t_ {
	TC keycode;
};
typedef struct registerexternalwindow_eventdata_url_keymenu_t_ registerexternalwindow_eventdata_url_keymenu_t;

struct externalbbswindow_eventdata_draw_t_ {
};
typedef struct externalbbswindow_eventdata_draw_t_ externalbbswindow_eventdata_draw_t;

struct externalbbswindow_eventdata_resize_t_ {
	SIZE work_sz;
};
typedef struct externalbbswindow_eventdata_resize_t_ externalbbswindow_eventdata_resize_t;

struct externalbbswindow_eventdata_close_t_ {
	Bool save;
};
typedef struct externalbbswindow_eventdata_close_t_ externalbbswindow_eventdata_close_t;

struct externalbbswindow_eventdata_butdn_t_ {
	W type;
	PNT pos;
};
typedef struct externalbbswindow_eventdata_butdn_t_ externalbbswindow_eventdata_butdn_t;

struct externalbbswindow_eventdata_paste_t_ {
};
typedef struct externalbbswindow_eventdata_paste_t_ externalbbswindow_eventdata_paste_t;

struct externalbbswindow_eventdata_scroll_t_ {
	W dh;
	W dv;
};
typedef struct externalbbswindow_eventdata_scroll_t_ externalbbswindow_eventdata_scroll_t;

struct bchanlhmievent_t_ {
	W type;
	union  {
		bchanlhmi_eventdata_mousemove_t common_mousemove;
		bchanlhmi_eventdata_keydown_t common_keydown;
		bchanlhmi_eventdata_menu_t common_menu;
		bchanlhmi_eventdata_timeout_t common_timeout;
		subjectwindow_eventdata_draw_t subjectwindow_draw;
		subjectwindow_eventdata_resize_t subjectwindow_resize;
		subjectwindow_eventdata_close_t subjectwindow_close;
		subjectwindow_eventdata_butdn_t subjectwindow_butdn;
		subjectwindow_eventdata_paste_t subjectwindow_paste;
		subjectwindow_eventdata_mousemove_t subjectwindow_mousemove;
		subjectwindow_eventdata_scroll_t subjectwindow_scroll;
		bbsmenuwindow_eventdata_draw_t bbsmenuwindow_draw;
		bbsmenuwindow_eventdata_resize_t bbsmenuwindow_resize;
		bbsmenuwindow_eventdata_close_t bbsmenuwindow_close;
		bbsmenuwindow_eventdata_butdn_t bbsmenuwindow_butdn;
		bbsmenuwindow_eventdata_mousemove_t bbsmenuwindow_mousemove;
		bbsmenuwindow_eventdata_scroll_t bbsmenuwindow_scroll;
		subjectoptionwindow_eventdata_filter_determine_t subjectoptionwindow_filter_determine;
		subjectoptionwindow_eventdata_filter_copy_t subjectoptionwindow_filter_copy;
		subjectoptionwindow_eventdata_filter_move_t subjectoptionwindow_filter_move;
		subjectoptionwindow_eventdata_filter_menu_t subjectoptionwindow_filter_menu;
		subjectoptionwindow_eventdata_filter_keymenu_t subjectoptionwindow_filter_keymenu;
		subjectoptionwindow_eventdata_order_change_t subjectoptionwindow_order_change;
		subjectoptionwindow_eventdata_orderby_change_t subjectoptionwindow_orderby_change;
		registerexternalwindow_eventdata_boradname_determine_t registerexternalwindow_boradname_determine;
		registerexternalwindow_eventdata_boradname_copy_t registerexternalwindow_boradname_copy;
		registerexternalwindow_eventdata_boradname_move_t registerexternalwindow_boradname_move;
		registerexternalwindow_eventdata_boradname_menu_t registerexternalwindow_boradname_menu;
		registerexternalwindow_eventdata_boradname_keymenu_t registerexternalwindow_boradname_keymenu;
		registerexternalwindow_eventdata_url_determine_t registerexternalwindow_url_determine;
		registerexternalwindow_eventdata_url_copy_t registerexternalwindow_url_copy;
		registerexternalwindow_eventdata_url_move_t registerexternalwindow_url_move;
		registerexternalwindow_eventdata_url_menu_t registerexternalwindow_url_menu;
		registerexternalwindow_eventdata_url_keymenu_t registerexternalwindow_url_keymenu;
		externalbbswindow_eventdata_draw_t externalbbswindow_draw;
		externalbbswindow_eventdata_resize_t externalbbswindow_resize;
		externalbbswindow_eventdata_close_t externalbbswindow_close;
		externalbbswindow_eventdata_butdn_t externalbbswindow_butdn;
		externalbbswindow_eventdata_paste_t externalbbswindow_paste;
		externalbbswindow_eventdata_scroll_t externalbbswindow_scroll;
	} data;
};
typedef struct bchanlhmievent_t_ bchanlhmievent_t;

typedef struct bchanlhmi_t_ bchanlhmi_t;

IMPORT bchanlhmi_t* bchanlhmi_new();
IMPORT VOID bchanlhmi_delete(bchanlhmi_t *hmi);
IMPORT W bchanlhmi_getevent(bchanlhmi_t *hmi, bchanlhmievent_t **evt);
IMPORT subjectwindow_t* bchanlhmi_newsubjectwindow(bchanlhmi_t *hmi, RECT *r, WID parent, TC *title, PAT *bgpat);
IMPORT bbsmenuwindow_t* bchanlhmi_newbbsmenuwindow(bchanlhmi_t *hmi, RECT *r, WID parent, TC *title, PAT *bgpat);
IMPORT subjectoptionwindow_t* bchanlhmi_newsubjectoptionwindow(bchanlhmi_t *hmi, PNT *p, subjectwindow_t *parent, TC *title, PAT *bgpat, W dnum_filter, W dnum_order, W dnum_orderby);
IMPORT registerexternalwindow_t* bchanlhmi_newregisterexternalwindow(bchanlhmi_t *hmi, PNT *p, WID parent, TC *title, PAT *bgpat);
IMPORT externalbbswindow_t* bchanlhmi_newexternalbbswindow(bchanlhmi_t *hmi, RECT *r, WID parent, TC *title, PAT *bgpat);
IMPORT VOID bchanlhmi_deletesubjectwindow(bchanlhmi_t *hmi, subjectwindow_t *window);
IMPORT VOID bchanlhmi_deletebbsmenuwindow(bchanlhmi_t *hmi, bbsmenuwindow_t *window);
IMPORT VOID bchanlhmi_deletesubjectoptionwindow(bchanlhmi_t *hmi, subjectoptionwindow_t *window);
IMPORT VOID bchanlhmi_deleteregisterexternalwindow(bchanlhmi_t *hmi, registerexternalwindow_t *window);
IMPORT VOID bchanlhmi_deleteexternalbbswindow(bchanlhmi_t *hmi, externalbbswindow_t *window);

#endif
